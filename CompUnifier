//desc: Gain unity receiver
import basic-util.jsfx-inc
import sample-measure.jsfx-inc
import loudness-util.jsfx-inc

in_pin: Left input
in_pin: Right input
out_pin: Left output
out_pin: Right output

slider1:1<0.1,100,0.1>Sample duration (ms)
slider2:1<0,1,1{Ready,Learning input,Compensating output}>Learning phase mode
slider3:-27<-54,0,0.1>Target volume
slider4:100<0,100,1>Attack
slider5:12<0,24,.1>Sustain
slider6:100<0,200,1>Mix
slider12:0<-24,24,0.1>Output change
slider13:0<-24,24,0.01>Volume compensation


@init
ext_noinit = 1.0;

function drawVolume(data, dataBefore, column, r, g, b, a, fillGraphAndBigLine) local(xStart, xEnd, yStart, yEnd, factorColor) (
  xStart = column-1;
  xEnd = column;

  yStart = dataBefore;
  yEnd = data;

  yStart <= 0 ? yStart = gfx_h;
  yEnd <= 0 ? yEnd = gfx_h;

  fillGraphAndBigLine == 1 ? (
      factorColor = .4;
      gfx_r = r * factorColor * a;
      gfx_g = g * factorColor * a;
      gfx_b = b * factorColor * a;
      gfx_line(xEnd-1, yEnd+1, xEnd-1, gfx_h);
  );

  gfx_r = r * a;
  gfx_g = g * a;
  gfx_b = b * a;
  gfx_line(xStart, yStart, xEnd, yEnd);
  fillGraphAndBigLine ? gfx_line(xStart, yStart+1, xEnd, yEnd+1);
);

function drawVolumeDifference(inputVolume, outputVolume, inputVolumeBefore, outputVolumeBefore, column, r, g, b, a) local(y) (
    gfx_r = r * a;
    gfx_g = g * a;
    gfx_b = b * a;
    gfx_line(column, inputVolume, column, outputVolume);
    gfx_line(column-1, inputVolumeBefore, column, outputVolumeBefore-1);
);

function drawVisualizer() local(column, dataIndex) (
  column = gfx_w;
    
  loop(gfx_w,
    dataIndex = this.memoryIterator - (gfx_w-1-column);
    dataIndex < 1 ? dataIndex += VISUALIZER_MEMORY_LENGTH - 1;

    column >= 0 ? (
        //visualizer.drawVolumeDifference(this.inputMemory[dataIndex], this.outputMemory[dataIndex-1], this.inputMemory[dataIndex], this.outputMemory[dataIndex-1], column, 1, 1, 1, .35);
        visualizer.drawVolume(this.inputMemory[dataIndex], this.inputMemory[dataIndex-1], column, 1, .5, .5, 1, 1);
        //visualizer.drawVolume(this.outputMemory[dataIndex], this.outputMemory[dataIndex-1], column, .5, 1, 1, 1, 0);
        visualizer.drawVolume(this.ratioMemory[dataIndex], this.ratioMemory[dataIndex-1], column, 0, .5, 1, 1, 0);
    );
    column -= 1;
  );
);

function addSignalLevels(targetVolumeDb, inputVolume, currentRatio) local(inputVolumeDb) (
    inputVolumeDb = convertRmsToDb(inputVolume);
    currentRatioDb = convertRatioToDbGain(currentRatio);

    this.inputMemory[this.memoryIterator] = (-inputVolumeDb / MINIMUM_VOLUME * gfx_h);
    this.ratioMemory[this.memoryIterator] = (-(targetVolumeDb + currentRatioDb) / MINIMUM_VOLUME * gfx_h);
    //this.outputMemory[this.memoryIterator] = (-(inputVolumeDb + currentRatioDb) / MINIMUM_VOLUME * gfx_h);

    this.memoryIterator += 1;
    this.memoryIterator == VISUALIZER_MEMORY_LENGTH ? this.memoryIterator = 0;
);



function setGainSliderValue(ratio) (
  slider12 = round(convertRatioToDbGain(ratio), 1);
);

function setTargetVolume(newVolumeDb) (
  slider3 != newVolumeDb ? slider3 = round(newVolumeDb, 1);
  targetVolumeDb = newVolumeDb;
  rangeLowerDb = newVolumeDb - slider5;
  gateDb = rangeLowerDb - slider5;
);



function autoLearnInputOutput() (
    slider2 != oldMode ? (
        slider2 == 1 ? ( //go back to learn input, so reset input/output measures
            measureInputIntegration.resetSample();
            measureOutputIntegration.resetSample();
        ) : (
            slider2 == 2 ? (
                measureOutputIntegration.resetSample();
            );
        );
    );

    slider2 == oldMode ? (
        slider2 == 1 ? (
            measureInputIntegration.learnNewLevel(sample.getAbsoluteVolume());
            setTargetVolume(convertRmsToDb(measureInputIntegration.average));

            measureInputIntegration.count / srate >= 10 ? slider2 = 2; //input measure done, now measure output
        ) : (
            slider2 == 2 ? (
                //compensate the volume difference between input and output after compression
                measureOutputIntegration.learnNewLevel(result.getAbsoluteVolume()); //learn if input is ready
                unifier.outputCompensation = measureOutputIntegration.count / srate > 2 ? convertDbLevelToRatio(slider3) / measureOutputIntegration.average : 1;
                slider13 = round(convertRatioToDbGain(unifier.outputCompensation), 1);

                measureOutputIntegration.count / srate >= 10 ? slider2 = 0; //TODO add more condition on input/output integration stabilization
            );
        );
    );

    oldMode = slider2;
);



function getAppliedRatio() (
    ((100-slider6)/100) * 1 + (slider6/100) * this.ratio * this.outputCompensation;
);
function getAppliedRatioWithCompensation() (
    this.getAppliedRatio() * this.outputCompensation;
);
function getNextAccelerationRatio(array, arrayIterator, arrayLength) local(acceleration, average) (
    acceleration = acceleration(array, arrayLength, arrayIterator);
    average = average(array, arrayLength);

    // 0.5 to compensate the ratio evolution since the average (supposed the middle of the memory)
    // 1/arrayLength for the future memory step
    average + acceleration * (.5 + 1/arrayLength);
);

function addAttackRatio(newRatio) (
    this.ratioAttackMemory[this.ratioAttackMemoryIterator] = newRatio;
    this.ratioAttackMemoryIterator = getNextIterator(this.ratioAttackMemoryIterator, RATIO_ATTACK_MEMORY_LENGTH);
);
function addAttackReleaseRatio(newRatio) (
    this.ratioAttackReleaseMemory[this.ratioAttackReleaseMemoryIterator] = newRatio;
    this.ratioAttackReleaseMemoryIterator = getNextIterator(this.ratioAttackReleaseMemoryIterator, RATIO_ATTACK_RELEASE_MEMORY_LENGTH);
);
function addSustainRatio(newRatio) (
    this.ratioSustainMemory[this.ratioSustainMemoryIterator] = newRatio;
    this.ratioSustainMemoryIterator = getNextIterator(this.ratioSustainMemoryIterator, RATIO_SUSTAIN_MEMORY_LENGTH);
);
function addSustainReleaseRatio(newRatio) (
    this.ratioSustainReleaseMemory[this.ratioSustainReleaseMemoryIterator] = newRatio;
    this.ratioSustainReleaseMemoryIterator = getNextIterator(this.ratioSustainReleaseMemoryIterator, RATIO_SUSTAIN_RELEASE_MEMORY_LENGTH);
);

function computeRatio(measureVolume) local(volumeDb, dbToCompensate, acceleratedAttackRatio, acceleratedAttackReleaseRatio, acceleratedSustainRatio, acceleratedSustainReleaseRatio, middleRatio, range) (
    volumeDb = convertRmsToDb(measureVolume);
    dbToCompensate = targetVolumeDb - volumeDb;

    volumeDb > targetVolumeDb && measureVolume != -1 ? (
        this.addAttackRatio(dbToCompensate);
        this.addAttackReleaseRatio(dbToCompensate);
        //modeAttack += 1;
    );
    
    volumeDb <= targetVolumeDb && volumeDb >= targetVolumeDb - slider5 && measureVolume != -1 ? (
        this.addAttackRatio(0);
        this.addAttackReleaseRatio(0);
        //modeSustain += 1;
    );

    measureVolume == -1 || volumeDb < targetVolumeDb - slider5 ? ( //means no signal, ratios must be released
        this.addAttackRatio(0);
        this.addAttackReleaseRatio(0);
        //modeNothing += 1;
    );


    acceleratedAttackRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioAttackMemory, this.ratioAttackMemoryIterator, RATIO_ATTACK_MEMORY_LENGTH));
    acceleratedAttackReleaseRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioAttackReleaseMemory, this.ratioAttackReleaseMemoryIterator, RATIO_ATTACK_RELEASE_MEMORY_LENGTH));
    acceleratedSustainRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioSustainMemory, this.ratioSustainMemoryIterator, RATIO_SUSTAIN_MEMORY_LENGTH));
    acceleratedSustainReleaseRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioSustainReleaseMemory, this.ratioSustainReleaseMemoryIterator, RATIO_SUSTAIN_RELEASE_MEMORY_LENGTH));

    attackRatio = min(acceleratedAttackRatio, acceleratedAttackReleaseRatio);
    sustainRatio = min(acceleratedSustainRatio, acceleratedSustainReleaseRatio);

    middleRatio = sqrt((attackRatio * attackRatio + sustainRatio * sustainRatio) / 2);
    
    average = middleRatio;//(attackRatio + sustainRatio) / 2;

    range = .2;
    this.ratio = min(1, max(0, 1 - (average-(1-range))/(2*range))) * attackRatio + min(1, max(0, 1 - ((1+range)-average)/(2*range))) * sustainRatio;
    mixAttack = min(1, max(0, 1 - (average-(1-range))/(2*range)));
    mixSustain = min(1, max(0, 1 - ((1+range)-average)/(2*range)));
    mixSum = mixAttack + mixSustain;
    mixAverage = average;

    this.ratio = sustainRatio * ((100-slider4)/100 + (slider4/100) * attackRatio);
    setGainSliderValue(this.getAppliedRatio());
);

function computeRatio2(measureVolume) local(volumeDb, dbToCompensate, acceleratedAttackRatio, acceleratedAttackReleaseRatio, acceleratedSustainRatio, acceleratedSustainReleaseRatio, middleRatio, range) (
    volumeDb = convertRmsToDb(measureVolume);
    dbToCompensate = targetVolumeDb - volumeDb;

    volumeDb > targetVolumeDb && measureVolume != -1 ? (
        this.addSustainRatio(0);
        this.addSustainReleaseRatio(0);
        //modeAttack += 1;
    );

    volumeDb <= targetVolumeDb && volumeDb >= targetVolumeDb - slider5 && measureVolume != -1 ? (
        this.addSustainRatio(dbToCompensate);
        this.addSustainReleaseRatio(dbToCompensate);
        //modeSustain += 1;
    );

    measureVolume == -1 || volumeDb < targetVolumeDb - slider5 ? ( //means no signal, ratios must be released
        this.addSustainRatio(0);
        this.addSustainReleaseRatio(0);
        //modeNothing += 1;
    );


    acceleratedAttackRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioAttackMemory, this.ratioAttackMemoryIterator, RATIO_ATTACK_MEMORY_LENGTH));
    acceleratedAttackReleaseRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioAttackReleaseMemory, this.ratioAttackReleaseMemoryIterator, RATIO_ATTACK_RELEASE_MEMORY_LENGTH));
    acceleratedSustainRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioSustainMemory, this.ratioSustainMemoryIterator, RATIO_SUSTAIN_MEMORY_LENGTH));
    acceleratedSustainReleaseRatio = convertDbGainToRatio(this.getNextAccelerationRatio(this.ratioSustainReleaseMemory, this.ratioSustainReleaseMemoryIterator, RATIO_SUSTAIN_RELEASE_MEMORY_LENGTH));

    attackRatio = min(acceleratedAttackRatio, acceleratedAttackReleaseRatio);
    sustainRatio = min(acceleratedSustainRatio, acceleratedSustainReleaseRatio);

    middleRatio = sqrt((attackRatio * attackRatio + sustainRatio * sustainRatio) / 2);

    average = middleRatio;//(attackRatio + sustainRatio) / 2;

    range = .2;
    //this.ratio = min(1, max(0, 1 - (average-(1-range))/(2*range))) * attackRatio + min(1, max(0, 1 - ((1+range)-average)/(2*range))) * sustainRatio;
    mixAttack = min(1, max(0, 1 - (average-(1-range))/(2*range)));
    mixSustain = min(1, max(0, 1 - ((1+range)-average)/(2*range)));
    mixSum = mixAttack + mixSustain;
    mixAverage = average;

    //this.ratio = sustainRatio;
    this.sustainRatio = sustainRatio;
    //setGainSliderValue(this.getAppliedRatio());
);

//Variables initialization
MINIMUM_VOLUME = 54;
learnDuration = srate;
oldMode = slider2;
oldMixValue = slider6; 
measure.resetSample();
measureSustain.resetSample();
setTargetVolume(slider3);
unifier.oldAttackRatio = 1;
unifier.oldSustainRatio = 1;
unifier.sustainRatio = 1;
unifier.outputCompensation = 1;

RATIO_ATTACK_MEMORY_LENGTH = 80;//40
RATIO_ATTACK_RELEASE_MEMORY_LENGTH = 200;//100
unifier.ratioAttackMemory = createArrayAndInit(RATIO_ATTACK_MEMORY_LENGTH, 0);
unifier.ratioAttackMemoryIterator = 0;
unifier.ratioAttackReleaseMemory = createArrayAndInit(RATIO_ATTACK_RELEASE_MEMORY_LENGTH, 0);
unifier.ratioAttackReleaseMemoryIterator = 0;

RATIO_SUSTAIN_MEMORY_LENGTH = 5;
RATIO_SUSTAIN_RELEASE_MEMORY_LENGTH = 25;
unifier.ratioSustainMemory = createArrayAndInit(RATIO_SUSTAIN_MEMORY_LENGTH, 0);
unifier.ratioSustainMemoryIterator = 0;
unifier.ratioSustainReleaseMemory = createArrayAndInit(RATIO_SUSTAIN_RELEASE_MEMORY_LENGTH, 0);
unifier.ratioSustainReleaseMemoryIterator = 0;

VISUALIZER_MEMORY_LENGTH = 2000;
visualizer.inputMemory = createArrayAndInit(VISUALIZER_MEMORY_LENGTH, -1);
visualizer.ratioMemory = createArrayAndInit(VISUALIZER_MEMORY_LENGTH, -1);
visualizer.outputMemory = createArrayAndInit(VISUALIZER_MEMORY_LENGTH, -1);
visualizer.memoryIterator = 0;
visualizer.signalCounter = 0; //for data/frame synchronization


@slider
learnDuration = slider1 / 1000 * srate;
learnDurationSustain = 50 / 1000 * srate;
setTargetVolume(slider3);

slider2 == oldMode && slider2 == 0 && (slider3 != oldTargetSliderValue || slider4 != oldAttackSliderValue || slider5 != oldSustainSliderValue) ? ( //parameters changes, so output measure has to be restarted
    slider2 = 2;
);

oldTargetSliderValue = slider3;
oldAttackSliderValue = slider4;
oldSustainSliderValue = slider5;


 
@block
measureSustain.count >= learnDurationSustain ? (
    unifier.computeRatio2(measureSustain.average);
    measureSustain.resetSample();
);
measure.count >= learnDuration ? (
    unifier.computeRatio(measure.average * unifier.sustainRatio);
    measure.resetSample();
);

//TODO move this part to computeRatio?
noSignal > srate/10 ? (
    unifier.computeRatio(-1);
    unifier.computeRatio2(-1);
    measure.resetSample();
    measureSustain.resetSample();
    //unifier.ratio = max(1, unifier.ratio / 2);
);

visualizer.inputMeasure.count >= srate/50 ? (
    visualizer.addSignalLevels(targetVolumeDb, noSignal > srate/10 ? -1 : visualizer.inputMeasure.average, unifier.getAppliedRatio());
    visualizer.addSignalLevels(targetVolumeDb, noSignal > srate/10 ? -1 : visualizer.inputMeasure.average, unifier.getAppliedRatio());
    //visualizer.addSignalLevels(targetVolumeDb, noSignal > srate/10 ? -1 : visualizer.inputMeasure.average, unifier.getAppliedRatio());
    visualizer.inputMeasure.resetSample();
);




@sample
sample.getSample(spl0, spl1);

signalDetected = measure.learnNewLevel(sample.getAbsoluteVolume());
measureSustain.learnNewLevel(sample.getAbsoluteVolume());
signalDetected == 0 ? noSignal += 1 : noSignal = 0;

visualizer.inputMeasure.learnNewLevel(sample.getAbsoluteVolume());

autoLearnInputOutput();


result.getSample(unifier.getAppliedRatioWithCompensation() * sample.left, unifier.getAppliedRatioWithCompensation() * sample.right);
resultDb = convertRmsToDb(result.getAbsoluteVolume());




spl0 = result.left;
spl1 = result.right;











@gfx 300 600
heightTarget = -targetVolumeDb / MINIMUM_VOLUME * gfx_h;
heightLower = -(rangeLowerDb) / MINIMUM_VOLUME * gfx_h;
heightGate = -(gateDb) / MINIMUM_VOLUME * gfx_h;

//background
backgroundColor = .12;
gfx_r=backgroundColor -.05;
gfx_g=backgroundColor -.00;
gfx_b=backgroundColor +.05;
gfx_rect(0, 0, gfx_w, gfx_h);

visualizer.drawVisualizer();

gfx_x=gfx_y=0;
gfx_blurto(gfx_w, gfx_h);


dbIndicator = -6;
loop(5,
    gfx_r=1;
    gfx_g=1;
    gfx_b=1;
    gfx_a=.2;
    gfx_line(0, heightTarget + (dbIndicator * gfx_h/MINIMUM_VOLUME), gfx_w, heightTarget + (dbIndicator * gfx_h/MINIMUM_VOLUME));
    dbIndicator += 3;
);
gfx_a=1;

//range limits
gfx_r=.6;
gfx_g=.6;
gfx_b=0;
gfx_line(0, heightLower, gfx_w, heightLower);

//gate
gfx_r=.6;
gfx_g=0;
gfx_b=0;
gfx_line(0, heightGate, gfx_w, heightGate);

//target
gfx_r=0;
gfx_g=.9;
gfx_b=0;
gfx_line(0, heightTarget, gfx_w, heightTarget);
