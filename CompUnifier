//desc: Gain unity receiver
import basic-util.jsfx-inc
import sample-measure.jsfx-inc
import loudness-util.jsfx-inc

in_pin: Left input
in_pin: Right input
out_pin: Left output
out_pin: Right output

slider1:20<0.1,100,0.1>Sample duration (ms)
slider2:1<0,1,1{Done,Learning}>Learnning phase mode
slider3:6<0,12,0.1>Peak range
slider4:-27<-80,0,0.1>Target volume
slider5:0<-24,24,0.1>Output volume
slider6:100<0,100,1>Mix

@init
ext_noinit = 1.0;

function setGainSliderValue(ratio) (
  slider5 = round(convertToDb(ratio), 1);
);

function getAppliedRatio() (
    ((100-slider6)/100) * 1 + (slider6/100) * this.ratio;
);

function computeRatio(volume) /*local(upperRange, lowerRange)*/ (
    //TODO something wrong around here
    volumeDb = convertToDb(volume);
    volumeDb > rangeUpper ? this.ratio = convertToRatio(rangeUpper - volumeDb);
    volumeDb < rangeLower && volumeDb > gateDb ? this.ratio = convertToRatio(rangeLower - volumeDb);
    volumeDb < rangeUpper && volumeDb > rangeLower ? this.ratio = 1;
    
    change1 = rangeUpper - volumeDb;
    change2 = rangeLower - volumeDb;
    //this.ratio = targetVolume / volume;
    ratioInDb = convertToDb(this.ratio);
    setGainSliderValue(this.getAppliedRatio());

    measure.resetSample();
);

function setTargetVolume(newVolume) (
  slider4 = round(newVolume, 1);
  targetVolume = convertToRatio(newVolume);
  targetVolumeDb = newVolume;
  rangeUpper = newVolume + slider3;
  rangeLower = newVolume - slider3;
  gateDb = rangeLower - 6;
);


//Variables initialization
learnDuration = srate;
measure.resetSample();
setTargetVolume(slider4);

gfxPixelsSample = createArrayAndInit(3000, 1);
gfxPixelsResult = createArrayAndInit(3000, 1);

@slider
learnDuration = slider1 / 1000 * srate;
setTargetVolume(slider4);

 
@block
measure.count >= learnDuration ? (
  unifier.computeRatio(measure.average);
);


@sample
sample.getSample(spl0, spl1);

measure.learnNewLevel(sample.getAbsoluteVolume());
measureIntegration.learnNewLevel(sample.getAbsoluteVolume());

setTargetVolume(convertToDb(measureIntegration.average));

result.getSample(unifier.getAppliedRatio() * sample.left, unifier.getAppliedRatio() * sample.right);
resultDb = convertToDb(result.getAbsoluteVolume());

spl0 = result.left;
spl1 = result.right;



@gfx 300 600
//gfx_x=gfx_y=5;
//gfx_r=gfx_b=1;
//gfx_g=gfx_a=1;
heightTarget = -targetVolumeDb / 80 * gfx_h;
heightUpper = -(rangeUpper) / 80 * gfx_h;
heightLower = -(rangeLower) / 80 * gfx_h;
heightGate = -(gateDb) / 80 * gfx_h;
heightSample = -volumeDb / 80 * gfx_h;
heightResult = -resultDb / 80 * gfx_h;

gfx_r=0;
gfx_g=1;
gfx_b=0;
gfx_line(0, heightTarget, gfx_w, heightTarget);

gfx_r=.5;
gfx_g=.5;
gfx_b=0;
gfx_line(0, heightUpper, gfx_w, heightUpper);
gfx_line(0, heightLower, gfx_w, heightLower);

gfx_r=.5;
gfx_g=0;
gfx_b=0;
gfx_line(0, heightGate, gfx_w, heightGate);


gfxPixelsSample[iteratorX] = heightSample;
gfxPixelsResult[iteratorX] = heightResult;
column = 0;

loop(gfx_w,
  gfx_r=.8;
  gfx_g=0;
  gfx_b=.8;
  column > 0 && gfxPixelsSample[column] != 1 ? gfx_line(column-1, gfxPixelsSample[column-1], column, gfxPixelsSample[column]);
  column += 1;
  column >= gfx_w ? column = 0;
);
/*
loop(gfx_w,
  gfx_r=.2;
  gfx_g=0;
  gfx_b=1;
  column > 0 ? gfx_line(column-1, gfxPixelsResult[column-1], column, gfxPixelsResult[column]);
  column += 1;
);*/

iteratorX += 1;
iteratorX >= gfx_w ? iteratorX = 0;

