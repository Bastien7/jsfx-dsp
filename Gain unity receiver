//desc: Gain unity receiver
import basic-util.jsfx-inc
import sample-measure.jsfx-inc

in_pin: Left input
in_pin: Right input
out_pin: Left output
out_pin: Right output

//slider1:1<0,1,1>Learning (no/yes)
slider2:20<5,100,1>Sample duration (ms)
slider3:0<0,1,1{Short-term,Long-term}>Average mode
slider4:0<-24,24,0.1>Output volume


@init
ext_noinit = 1.0;

function setGainSliderValue(ratio) (
  slider4 = round(convertToDb(ratio), 1);
);


//short term functions
function initializeShortTermList() local(i) (
  this.shortTermRatioList = createArray(this.SHORT_TERM_RATIO_COUNT);
  loop(this.SHORT_TERM_RATIO_COUNT, this.shortTermRatioList[i] = 1; i += 1;);
);
function updateShortTermRatio(ratio) local(i, sum) (
  //insert new ratio in the short term list
  this.shortTermRatioList[this.nextShortTermRatioIndex] = ratio;
  this.nextShortTermRatioIndex += 1;
  this.nextShortTermRatioIndex == this.SHORT_TERM_RATIO_COUNT ? this.nextShortTermRatioIndex = 0;
  
  //compute the new short term ratio average
  sum = 0; i = 0;
  loop(this.SHORT_TERM_RATIO_COUNT, sum += this.shortTermRatioList[i]; i += 1;);
  
  this.shortTermRatio = sum / this.SHORT_TERM_RATIO_COUNT;
);

function getAppliedRatio() (
  slider3 == 0 ? ((0*this.currentRatio + this.shortTermRatio) / 1) : (this.integratedRatio);
);


function resetIntegrationData() (
  this.integratedRatio = 1;
  this.ratioCount = 0;
  this.wasLearning = 1;
);

function addNewRatio(measure) local(a) (
  _global.sampleEnded = 0;

  this.currentRatio = (_global.gainUnityAverageVolume / measure.average);
  this.updateShortTermRatio(this.currentRatio);
  this.integratedRatio = ((this.integratedRatio * this.ratioCount) + this.currentRatio) / (this.ratioCount + 1);
  this.ratioCount += 1;
  setGainSliderValue(this.getAppliedRatio());

  measure.resetSample();
);

function limitVolume(sample) local(endVolume) (
  endVolume = (abs(sample.left) + abs(sample.right)) / 2;

  endVolume > 1 ? (
    sample.left = sample.left / endVolume;
    sample.right = sample.right / endVolume;
  );
);

function applyRatio(sample) local(appliedRatio) (
  appliedRatio = this.getAppliedRatio();
  
  sample.left = sample.left * appliedRatio;
  sample.right = sample.right * appliedRatio;
  
  limitVolume();
);

//variables initialization
_global.learnDuration = srate;
unifier.SHORT_TERM_RATIO_COUNT = 10; //constant
unifier.wasLearning = 1;

unifier.currentRatio = 1;
unifier.shortTermRatio = 1;
unifier.integratedRatio = 1;
unifier.ratioCount = 0;

measure.resetSample();
_global.sampleStarted = 0;
unifier.initializeShortTermList();


@slider
_global.learnDuration = slider2 / 1000 * srate;
setGainSliderValue(unifier.getAppliedRatio());
slider3 == 0 ? (wasLearning = 0);
slider3 == 1 && wasLearning == 0 ? unifier.resetIntegrationData();



@block
_global.sampleEnded == 1 /*&& measure.hasSignalToLearn()*/ ? ( //condition removed for practicality, let's see if it's needed
  unifier.addNewRatio(measure);
);



@sample
sample.getSample(spl0, spl1);

_global.sampleStarted == 1 && measure.count != 0 ? (
    measure.resetSample();
    _global.sampleStarted = 0;
);

measure.learnNewLevel(sample);
unifier.applyRatio(sample);

spl0 = sample.left;
spl1 = sample.right;
