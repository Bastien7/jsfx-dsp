//desc: Gain unity receiver
import basic-util.jsfx-inc
import sample-measure.jsfx-inc
import loudness-util.jsfx-inc

in_pin: Left input
in_pin: Right input
in_pin: Left input before FX
in_pin: Right input before FX
out_pin: Left output
out_pin: Right output

slider1:20<5,100,1>Sample duration (ms)
slider2:0<0,1,1{Short-term,Integration}>Average mode
slider3:0<0,1,1{Loudness,RMS}>Detection mode
slider4:0<-24,24,0.1>Output volume

@init
ext_noinit = 1.0;

function setGainSliderValue(ratio) (
  slider4 = round(convertToDb(ratio), 1);
);


//Short term functions
function initializeShortTermList() local(i) (
  this.shortTermRatioList = createArray(this.SHORT_TERM_RATIO_COUNT);
  this.nextShortTermRatioIndex = 0;
  loop(this.SHORT_TERM_RATIO_COUNT, this.shortTermRatioList[i] = 1; i += 1;);
);
function updateShortTermRatio(ratio) local(i, sum) (
  //insert new ratio in the short term list
  this.shortTermRatioList[this.nextShortTermRatioIndex] = ratio;
  this.nextShortTermRatioIndex += 1;
  this.nextShortTermRatioIndex == this.SHORT_TERM_RATIO_COUNT ? this.nextShortTermRatioIndex = 0;
  
  //compute the new short term ratio average
  sum = 0; i = 0;
  loop(this.SHORT_TERM_RATIO_COUNT, sum += this.shortTermRatioList[i]; i += 1;);
  
  this.shortTermRatio = sum / this.SHORT_TERM_RATIO_COUNT;
);

function getAppliedRatio() local(ratio) (
    slider2 == 0 ? (
        ratio = (0*this.currentRatio + this.shortTermRatio) / 1;
    ) : (
        ratio = this.integratedRatio;
    );

    max(0.063, min(15.84, ratio)); //limit ratio to -24/+24dB
);

function resetShortTermData() (
    this.initializeShortTermList();
    this.shortTermRatio = 1;
    this.previousMode = 0; //Short term mode becomes the current mode
);

function resetIntegrationData() (
  this.integratedRatio = 1;
  this.ratioCount = 0;
  this.previousMode = 1; //Integration mode becomes the current mode
);

function addNewRatio(measureBeforeFX, measureAfterFX) local(a) (
  this.currentRatio = (measureBeforeFX.average / measureAfterFX.average);
  this.updateShortTermRatio(this.currentRatio);
  this.integratedRatio = ((this.integratedRatio * this.ratioCount) + this.currentRatio) / (this.ratioCount + 1);
  this.ratioCount += 1;
  setGainSliderValue(this.getAppliedRatio());

  measureBeforeFX.resetSample();
  measureAfterFX.resetSample();
);

function limitVolume(sample) local(endVolume) (
    endVolume = abs(sample);
    endVolume >= 1 ? sample = sample / endVolume;
    sample;
);

function applyRatio(sample) (
  sample = this.limitVolume(sample * this.getAppliedRatio());
  sample;
);


//Variables initialization
learnDuration = srate;
unifier.SHORT_TERM_RATIO_COUNT = 10; //constant
unifier.previousMode = 1;

unifier.currentRatio = 1;
unifier.shortTermRatio = 1;
unifier.integratedRatio = 1;
unifier.ratioCount = 0;

measureBeforeFX.resetSample();
measureAfterFX.resetSample();
unifier.initializeShortTermList();

_loudnessBeforeFX.initLoudnessWeighting();
_loudnessAfterFX.initLoudnessWeighting();

@slider
learnDuration = slider1 / 1000 * srate;
setGainSliderValue(unifier.getAppliedRatio());

//Manage mode changes
slider2 == 0 && unifier.previousMode == 1 ? unifier.resetShortTermData();
slider2 == 1 && unifier.previousMode == 0 ? unifier.resetIntegrationData();



@block
measureBeforeFX.count > learnDuration && measureAfterFX.count > learnDuration ? (
  unifier.addNewRatio(measureBeforeFX, measureAfterFX);
);



@sample
sampleAfterFX.getSample(spl0, spl1);

slider3 == 0 ? ( //Loudness mode
  _loudnessBeforeFX.applyLoudnessWeighting(spl2, spl3);
  _loudnessAfterFX.applyLoudnessWeighting(spl0, spl1);
  sampleBeforeFXwithLoudness.getSample(_loudnessBeforeFX.left, _loudnessBeforeFX.right);
  sampleAfterFXwithLoudness.getSample(_loudnessAfterFX.left, _loudnessAfterFX.right);
  
  measureBeforeFX.learnNewLevel(sampleBeforeFXwithLoudness.getAbsoluteVolume());
  measureAfterFX.learnNewLevel(sampleAfterFXwithLoudness.getAbsoluteVolume());
) : ( //RMS mode
  sampleBeforeFX.getSample(spl2, spl3);
  measureBeforeFX.learnNewLevel(sampleBeforeFX.getAbsoluteVolume());
  measureAfterFX.learnNewLevel(sampleAfterFX.getAbsoluteVolume());
);

spl0 = unifier.applyRatio(sampleAfterFX.left);
spl1 = unifier.applyRatio(sampleAfterFX.right);
